version: 2.1

executors:
  go:
    docker:
      - image: circleci/golang:1.12
    working_directory: /tmp/octopus

jobs: # basic units of work in a run
  build: # runs not using Workflows must have a `build` job as entry point
    executor: go
    parallelism: 2
    steps: # steps that comprise the `build` job
      - checkout # check out source code to working directory
      - restore_cache: # restores saved cache if no changes are detected since last run
          keys:
            - go-mod-v3-{{ checksum "go.sum" }}
      - run:
          name: Install linter
          command: |
            GO111MODULE=on go get github.com/golangci/golangci-lint/cmd/golangci-lint@v1.17.0
      - run: make check_deps
      - run: make check_lint
      - run: make test
      - run: make build-linux
      - run:
          name: List built binaries
          command: |
            pwd
            ls -l ./bin/
      - save_cache:
          key: go-mod-v3-{{ checksum "go.sum" }}
          paths:
            - "/go/pkg/mod"
          # Persist the specified paths (workspace/echo-output) into the workspace for use in downstream job.
      - persist_to_workspace:
          # Must be an absolute path, or relative path from working_directory. This is a directory on the container which is
          # taken to be the root directory of the workspace.
          root: bin
          # Must be relative path from root
          paths:
            - pushd
            - spotlightd
            - truapid
  test_migrations:
    docker:
      - image: circleci/golang:1.12
        environment:
          PG_ADDR: localhost:5432
          PG_USER: postgres
          PG_USER_PW: postgres
          PG_DB_NAME: trudb
      - image: postgres:11.1
        environment:
          POSTGRES_DB: trudb
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
    steps:
      - checkout
      - run:
          name: Test Migrations
          command: |
            make db_init
            make db_version
            make db_migrate
            make db_reset
            make db_version
            make db_migrate
            make db_version
  deploy:
    executor: go
    steps:
      - add_ssh_keys:
          fingerprints:
            - "73:b6:96:34:a1:e8:b6:2e:b2:d1:6a:73:e0:ad:8b:3e"
      - attach_workspace:
          at: /tmp/octopus/bin
      - run:
          name: List built binaries
          command: |
            pwd
            ls -l ./bin/
      - run:
          name: Deploy
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
                mkdir ~/.ssh
                ssh-keyscan $BETA_HOST >> ~/.ssh/known_hosts
                ssh $BETA_USER@$BETA_HOST "sudo systemctl stop truapid.service"
                scp bin/truapid "$BETA_USER@$BETA_HOST:/home/ubuntu/go/bin/truapid"
                ssh $BETA_USER@$BETA_HOST "sudo setcap CAP_NET_BIND_SERVICE=+eip /home/ubuntu/go/bin/truapid"
                ssh $BETA_USER@$BETA_HOST "sudo systemctl start truapid.service"
                scp bin/pushd "$BETA_USER@$BETA_HOST:$DEPLOY_LOCATION/pushd"
                ssh $BETA_USER@$BETA_HOST "cd $SERVICE_LOCATION && docker-compose up --build -d pushd"
                scp bin/spotlightd "$BETA_USER@$BETA_HOST:/opt/services/spotlight/bin/spotlightd"
                ssh $BETA_USER@$BETA_HOST 'cd /opt/services/spotlight && docker-compose up --build -d spotlightd'
                echo "deploying to beta.trustory.io"
            elif [ "${CIRCLE_BRANCH}" == "develop" ]
            then
                mkdir ~/.ssh
                ssh-keyscan $DEVNET_HOST >> ~/.ssh/known_hosts
                ssh $DEVNET_USER@$DEVNET_HOST "sudo systemctl stop truapid.service"
                scp bin/truapid "$DEVNET_USER@$DEVNET_HOST:/home/ubuntu/go/bin/truapid"
                ssh $DEVNET_USER@$DEVNET_HOST "sudo setcap CAP_NET_BIND_SERVICE=+eip /home/ubuntu/go/bin/truapid"
                ssh $DEVNET_USER@$DEVNET_HOST "sudo systemctl start truapid.service"
                scp bin/pushd "$DEVNET_USER@$DEVNET_HOST:$DEPLOY_LOCATION/pushd"
                ssh $DEVNET_USER@$DEVNET_HOST "cd $SERVICE_LOCATION && docker-compose up --build -d pushd"
                scp bin/spotlightd "$DEVNET_USER@$DEVNET_HOST:/opt/services/spotlight/bin/spotlightd"
                ssh $DEVNET_USER@$DEVNET_HOST 'cd /opt/services/spotlight && docker-compose up --build -d spotlightd'
                echo "deployed to devnet"
            fi
  migrate:
    executor: go
    steps:
      - add_ssh_keys:
          fingerprints:
            - "73:b6:96:34:a1:e8:b6:2e:b2:d1:6a:73:e0:ad:8b:3e"
      - run:
          name: Migrate DB
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              mkdir ~/.ssh
              ssh-keyscan $BETA_HOST >> ~/.ssh/known_hosts
              ssh $BETA_USER@$BETA_HOST "cd $OCTOPUS_LOCATION && git checkout master && git pull"
              ssh $BETA_USER@$BETA_HOST "cd $OCTOPUS_LOCATION && /usr/local/go/bin/go run ./services/db/migrations/*.go"
              echo "Migrated betadb database on beta.trustory.io"
            elif [ "${CIRCLE_BRANCH}" == "develop" ]
            then               
              mkdir ~/.ssh
              ssh-keyscan $DEVNET_HOST >> ~/.ssh/known_hosts
              ssh $DEVNET_USER@$DEVNET_HOST "cd $OCTOPUS_LOCATION && git checkout develop && git pull"
              ssh $DEVNET_USER@$DEVNET_HOST "cd $OCTOPUS_LOCATION && /usr/local/go/bin/go run ./services/db/migrations/*.go"
              echo "Migrated trudb database on Devnet"
            fi
  db_dump:
    docker:
      - image: jbergknoff/postgresql-client
    working_directory: /tmp/octopus
    steps:
      - run: apk add --update --no-cache ca-certificates
      - run:
          name: Create password file
          command: |
            echo "${PG_ADDR_PROD}:${PG_DB_NAME_PROD}:${PG_USER_PROD}:${PG_USER_PW_PROD}" > ~/.pgpass
            chmod 600 ~/.pgpass
      - run:
          name: Dump DB
          command: |
            mkdir -p db
            pg_dump -U ${PG_USER_PROD} -h ${PG_HOSTNAME_PROD} -p 5432 ${PG_DB_NAME_PROD} | gzip -9 > db/dump.sql.gz
      - persist_to_workspace:
          root: db
          paths:
            - dump.sql.gz
  s3_upload:
    docker:
      - image: circleci/python:2.7-jessie
    working_directory: /tmp/octopus
    steps:
      - attach_workspace:
          at: /tmp/octopus/db
      - run:
          name: List backups
          command: |
            pwd
            ls -l ./db/
      - run:
          name: Install awscli
          command: sudo pip install awscli
      - run:
          name: Upload to S3
          command: aws s3 cp ./db/dump.sql.gz s3://io-trustory-backups/db/$(date +%y%m%d%H)-dump.sql.gz
  bigquery_metrics:
    executor: go
    steps:
      - checkout
      - run:
          name: Run bigquery metrics
          command: |
            cd actions/metrics
            make decrypt_secret
            go run *.go
workflows:
  version: 2
  build-workflow:
    jobs:
      - build
      - test_migrations
      - db_dump:
          filters:
            branches:
              only:
                - master
      - s3_upload:
          requires:
            - db_dump
          filters:
            branches:
              only:
                - master
      - deploy:
          requires:
            - build
            - test_migrations
          filters:
            branches:
              only:
                - master
                - develop
      - migrate:
          requires:
            - test_migrations
          filters:
            branches:
              only:
                - master
                - develop
  nightly-backup:
    triggers:
      - schedule:
          # 4 am in PST
          cron: "0 11 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - db_dump
      - s3_upload:
          requires:
            - db_dump
  metrics:
    triggers:
      - schedule:
          cron: "10 0 * * *"
          filters:
            branches:
              only:
                - develop
    jobs:
      - bigquery_metrics
